  * Top
  * Requirements
  * Introduction
  * Installation
  * Setup script
  * Configuration
  * Transformations
  * FAQ
  * Developers
  * Credits
  * Translators
  * Glossary

phpMyAdmin 2.11.9.6 Documentation

  * phpMyAdmin homepage
  * SourceForge phpMyAdmin project page
  * Official phpMyAdmin wiki
  * Local documents:
      + Version history: ChangeLog
      + General notes: README
      + License: LICENSE
  * Documentation version: $Id: Documentation.html 13041 2009-10-12 22:27:06Z
    lem9 $

Requirements

  * PHP
      + You need PHP 4.2.0 or newer, with session support (see FAQ 1.31)
      + You need GD2 support in PHP to display inline thumbnails of JPEGs
        ("image/jpeg: inline") with their original aspect ratio
      + You need PHP 4.3.0 or newer to use the "text/plain: external"
        MIME-based transformation
      + When using the "cookie" authentication method, the mcrypt extension is
        strongly suggested for most users and is required for 64?bit machines.
        Not using mcrypt will cause phpMyAdmin to load pages significantly
        slower.
  * MySQL 3.23.32 or newer (details);
  * Web browser with cookies enabled.

Introduction

phpMyAdmin can manage a whole MySQL server (needs a super-user) as well as a
single database. To accomplish the latter you'll need a properly set up MySQL
user who can read/write only the desired database. It's up to you to look up
the appropriate part in the MySQL manual.

Currently phpMyAdmin can:

  * browse and drop databases, tables, views, fields and indexes
  * create, copy, drop, rename and alter databases, tables, fields and indexes
  * maintenance server, databases and tables, with proposals on server
    configuration
  * execute, edit and bookmark any SQL-statement, even batch-queries
  * load text files into tables
  * create^1 and read dumps of tables
  * export^1 data to various formats: CSV, XML, PDF, ISO/IEC 26300 -
    OpenDocument Text and Spreadsheet, Word, Excel and L^AT[E]X formats
  * administer multiple servers
  * manage MySQL users and privileges
  * check referential integrity in MyISAM tables
  * using Query-by-example (QBE), create complex queries automatically
    connecting required tables
  * create PDF graphics of your Database layout
  * search globally in a database or a subset of it
  * transform stored data into any format using a set of predefined functions,
    like displaying BLOB-data as image or download-link
  * support InnoDB tables and foreign keys (see FAQ 3.6)
  * support mysqli, the improved MySQL extension (see FAQ 1.17)
  * communicate in 54 different languages

A word about users:

Many people have difficulty understanding the concept of user management with
regards to phpMyAdmin. When a user logs in to phpMyAdmin, that username and
password are passed directly to MySQL. phpMyAdmin does no account management on
its own (other than allowing one to manipulate the MySQL user account
information); all users must be valid MySQL users.

^1) phpMyAdmin can compress (Zip, GZip -RFC 1952- or Bzip2 formats) dumps and
CSV exports if you use PHP with Zlib support (--with-zlib) and/or Bzip2 support
(--with-bz2). Proper support may also need changes in php.ini.

Installation

 1. Quick Install
 2. Setup script usage
 3. Linked-tables infrastructure
 4. Upgrading from an older version
 5. Using authentication modes

phpMyAdmin does not apply any special security methods to the MySQL database
server. It is still the system administrator's job to grant permissions on the
MySQL databases properly. phpMyAdmin's "Privileges" page can be used for this.

Warning for Mac users:
if you are on a Mac OS version before OS X, StuffIt unstuffs with Mac formats.
So you'll have to resave as in BBEdit to Unix style ALL phpMyAdmin scripts
before uploading them to your server, as PHP seems not to like Mac-style end of
lines character ("\r").

Quick Install

 1. Choose an appropriate distribution kit from the phpmyadmin.net Downloads
    page. Some kits contain only the English messages, others contain all
    languages in UTF-8 format (this should be fine in most situations), others
    contain all languages and all character sets. We'll assume you chose a kit
    whose name looks like phpMyAdmin-x.x.x-all-languages.tar.gz.
 2. Untar or unzip the distribution (be sure to unzip the subdirectories): tar
    -xzvf phpMyAdmin_x.x.x-all-languages.tar.gz in your webserver's document
    root. If you don't have direct access to your document root, put the files
    in a directory on your local machine, and, after step 4, transfer the
    directory on your web server using, for example, ftp.
 3. Ensure that all the scripts have the appropriate owner (if PHP is running
    in safe mode, having some scripts with an owner different from the owner of
    other scripts will be a problem). See FAQ 4.2 and FAQ 1.26 for suggestions.
 4. Now you must configure your installation. There are two methods that can be
    used. Traditionally, users have hand-edited a copy of config.inc.php, but
    now a wizard-style setup script is provided for those who prefer a
    graphical installation. Creating a config.inc.php file is still a quick way
    to get started and needed for some advanced features.
      + To manually create the file, simply use your text editor to create the
        file config.inc.php (you can copy config.sample.inc.php to get minimal
        configuration file) in the main (top-level) phpMyAdmin directory (the
        one that contains index.php). phpMyAdmin first loads libraries/
        config.default.php and then overrides those values with anything found
        in config.inc.php. If the default value is okay for a particular
        setting, there is no need to include it in config.inc.php. You'll need
        a few directives to get going, a simple configuration may look like
        this:

        <?php
        $cfg['blowfish_secret'] = 'ba17c1ec07d65003';  // use here a value of your choice

        $i=0;
        $i++;
        $cfg['Servers'][$i]['auth_type']     = 'cookie';
        ?>

        Or, if you prefer to not be prompted every time you log in:

        <?php

        $i=0;
        $i++;
        $cfg['Servers'][$i]['user']          = 'root';
        $cfg['Servers'][$i]['password']      = 'cbb74bc'; // use here your password
        ?>

        For a full explanation of possible configuration values, see the
        Configuration Section of this document.
      + Instead of manually editing config.inc.php, you can use the Setup
        Script. First you must manually create a folder config in the
        phpMyAdmin directory. This is a security measure. On a Linux/Unix
        system you can use the following commands:

        cd phpMyAdmin
        mkdir config                        # create directory for saving
        chmod o+rw config                   # give it world writable permissions

        And to edit an existing configuration, copy it over first:

        cp config.inc.php config/           # copy current configuration for editing
        chmod o+w config/config.inc.php     # give it world writable permissions

        On other platforms, simply create the folder and ensure that your web
        server has read and write access to it. FAQ 1.26 can help with this.

        Next, open scripts/setup.php in your browser. Note that changes are not
        saved to disk until explicitly choose Save from the Configuration area
        of the screen. Normally the script saves the new config.inc.php to the
        config/ directory, but if the webserver does not have the proper
        permissions you may see the error "Cannot load or save configuration."
        Ensure that the config/ directory exists and has the proper permissions
        - or use the Download link to save the config file locally and upload
        (via FTP or some similar means) to the proper location.

        Once the file has been saved, it must be moved out of the config/
        directory and the permissions must be reset, again as a security
        measure:

        mv config/config.inc.php .         # move file to current directory
        chmod o-rw config.inc.php          # remove world read and write permissions
        rm -rf config                      # remove not needed directory

        Now the file is ready to be used. You can choose to review or edit the
        file with your favorite editor, if you prefer to set some advanced
        options which the setup script does not provide.
 5. If you are using the auth_type "config", it is suggested that you protect
    the phpMyAdmin installation directory because using config does not require
    a user to enter a password to access the phpMyAdmin installation. Use of an
    alternate authentication method is recommended, for example with HTTP?AUTH
    in a .htaccess file or switch to using auth_type cookie or http. See the
    multi?user sub?section of this FAQ for additional information, especially
    FAQ 4.4.
 6. Open the main phpMyAdmin directory in your browser. phpMyAdmin should now
    display a welcome screen and your databases, or a login dialog if using
    HTTP or cookie authentication mode.
 7. You should deny access to the ./libraries subfolder in your webserver
    configuration. For Apache you can use supplied .htaccess file in that
    folder, for other webservers, you should configure this yourself. Such
    configuration prevents from possible path exposure and cross side scripting
    vulnerabilities that might happen to be found in that code.

Linked-tables infrastructure

For a whole set of new features (bookmarks, comments, SQL-history,
PDF-generation, field contents transformation, etc.) you need to create a set
of special tables. Those tables can be located in your own database, or in a
central database for a multi-user installation (this database would then be
accessed by the controluser, so no other user should have rights to it).

Please look at your ./scripts/ directory, where you should find a file called
create_tables.sql. (If you are using a Windows server, pay special attention to
FAQ 1.23).

If your MySQL server's version is 4.1.2 or later, please use ./scripts/
create_tables_mysql_4_1_2+.sql instead, for a new installation.

If you already had this infrastructure and upgraded to MySQL 4.1.2 or later,
please use ./scripts/upgrade_tables_mysql_4_1_2+.sql.

You can use your phpMyAdmin to create the tables for you. Please be aware that
you may need special (administrator) privileges to create the database and
tables, and that the script may need some tuning, depending on the database
name.

After having imported the ./scripts/create_tables.sql file, you should specify
the table names in your ./config.inc.php file. The directives used for that can
be found in the Configuration section. You will also need to have a controluser
with the proper rights to those tables (see section Using authentication modes
below).

Upgrading from an older version

Simply copy ./config.inc.php from your previous installation into the newly
unpacked one. Configuration files from very old versions (2.3.0 or before) may
require some tweaking as some options have been changed or removed. For
compatibility with PHP 6, remove a set_magic_quotes_runtime(0); statement that
you might find near the end of your configuration file.

You should not copy libraries/config.default.php over config.inc.php because
the default configuration file is version-specific.

If you have upgraded your MySQL server from a version previous to 4.1.2 to
version 4.1.2 or newer and if you use the pmadb/linked table infrastructure,
you should run the SQL script found in scripts/upgrade_tables_mysql_4_1_2+.sql.

Using authentication modes

  * HTTP and cookie authentication modes are recommended in a multi-user
    environment where you want to give users access to their own database and
    don't want them to play around with others.
    Nevertheless be aware that MS Internet Explorer seems to be really buggy
    about cookies, at least till version 6, and PHP 4.1.1 is also a bit buggy
    in this area!
    Even in a single-user environment, you might prefer to use HTTP or cookie
    mode so that your user/password pair are not in clear in the configuration
    file.
  * HTTP and cookie authentication modes are more secure: the MySQL login
    information does not need to be set in the phpMyAdmin configuration file
    (except possibly for the controluser).
    However, keep in mind that the password travels in plain text, unless you
    are using the HTTPS protocol.
    In cookie mode, the password is stored, encrypted with the blowfish
    algorithm, in a temporary cookie.
  * Note: starting with phpMyAdmin 2.6.1, this section is only applicable if
    your MySQL server is previous to 4.1.2, or is running with
    --skip-show-database.

    For 'HTTP' and 'cookie' modes, phpMyAdmin needs a controluser that has only
    the SELECT privilege on the `mysql`.`user` (all columns except `Password`),
    `mysql`.`db` (all columns), `mysql`.`host` (all columns) and `mysql`.
    `tables_priv` (all columns except `Grantor` and `Timestamp`) tables.
    You must specify the details for the controluser in the config.inc.php file
    under the $cfg['Servers'][$i]['controluser'] and $cfg['Servers'][$i]
    ['controlpass'] settings.
    The following example assumes you want to use pma as the controluser and
    pmapass as the controlpass, but this is only an example: use something else
    in your file! Input these statements from the phpMyAdmin SQL Query window
    or mysql command?line client.
    Of course you have to replace localhost with the webserver's host if it's
    not the same as the MySQL server's one.

    GRANT USAGE ON mysql.* TO 'pma'@'localhost' IDENTIFIED BY 'pmapass';
    GRANT SELECT (
        Host, User, Select_priv, Insert_priv, Update_priv, Delete_priv,
        Create_priv, Drop_priv, Reload_priv, Shutdown_priv, Process_priv,
        File_priv, Grant_priv, References_priv, Index_priv, Alter_priv,
        Show_db_priv, Super_priv, Create_tmp_table_priv, Lock_tables_priv,
        Execute_priv, Repl_slave_priv, Repl_client_priv
        ) ON mysql.user TO 'pma'@'localhost';
    GRANT SELECT ON mysql.db TO 'pma'@'localhost';
    GRANT SELECT ON mysql.host TO 'pma'@'localhost';
    GRANT SELECT (Host, Db, User, Table_name, Table_priv, Column_priv)
        ON mysql.tables_priv TO 'pma'@'localhost';

    If you are using an old MySQL version (below 4.0.2), please replace the
    first GRANT SELECT query by this one:

    GRANT SELECT (
        Host, User, Select_priv, Insert_priv, Update_priv, Delete_priv,
        Create_priv, Drop_priv, Reload_priv, Shutdown_priv, Process_priv,
        File_priv, Grant_priv, References_priv, Index_priv, Alter_priv
        ) ON mysql.user TO 'pma'@'localhost';

    ... and if you want to use the many new relation and bookmark features:

    GRANT SELECT, INSERT, UPDATE, DELETE ON <pma_db>.* TO 'pma'@'localhost';

    (this of course requires that your linked-tables infrastructure be set up).
    Of course, the above queries only work if your MySQL version supports the
    GRANT command. This is the case since 3.22.11.
  * Then each of the true users should be granted a set of privileges on a set
    of particular databases. Normally you shouldn't give global privileges to
    an ordinary user, unless you understand the impact of those privileges (for
    example, you are creating a superuser).
    For example, to grant the user real_user with all privileges on the
    database user_base:

    GRANT ALL PRIVILEGES ON user_base.* TO 'real_user'@localhost IDENTIFIED BY 'real_password';

    What the user may now do is controlled entirely by the MySQL user
    management system.
    With HTTP or cookie authentication mode, you don't need to fill the user/
    password fields inside the $cfg['Servers'] array.

'HTTP' authentication mode

  * Uses HTTP Basic authentication method and allows you to log in as any valid
    MySQL user.
  * Is supported with most PHP configurations. For IIS (ISAPI) support using
    CGI PHP see FAQ 1.32, for using with Apache CGI see FAQ 1.35.
  * See also FAQ 4.4 about not using the .htaccess mechanism along with 'HTTP'
    authentication mode.

'cookie' authentication mode

  * You can use this method as a replacement for the HTTP authentication (for
    example, if you're running IIS).
  * Obviously, the user must enable cookies in the browser, but this is now a
    requirement for all authentication modes.
  * With this mode, the user can truly log out of phpMyAdmin and log in back
    with the same username.
  * If you want to log in to arbitrary server see $cfg['AllowArbitraryServer']
    directive.
  * As mentioned in the requirements section, having the mcrypt extension will
    speed up access considerably, but is not required.

'signon' authentication mode

  * This mode is a convenient way of using credentials from another application
    to authenticate to phpMyAdmin.
  * The other application has to store login information into session data.
  * More details in the auth_type section.

'config' authentication mode

  * This mode is the less secure one because it requires you to fill the $cfg
    ['Servers'][$i]['user'] and $cfg['Servers'][$i]['password'] fields (and as
    a result, anyone who can read your config.inc.php can discover your
    username and password).
    But you don't need to setup a "controluser" here: using the $cfg['Servers']
    [$i]['only_db'] might be enough.
  * In the ISP FAQ section, there is an entry explaining how to protect your
    configuration file.
  * For additional security in this mode, you may wish to consider the Host
    authentication $cfg['Servers'][$i]['AllowDeny']['order'] and $cfg
    ['Servers'][$i]['AllowDeny']['rules'] configuration directives.
  * Unlike cookie and http, does not require a user to log in when first
    loading the phpMyAdmin site. This is by design but could allow any user to
    access your installation. Use of some restriction method is suggested,
    perhaps a .htaccess file with the HTTP-AUTH directive or disallowing
    incoming HTTP requests at one?s router or firewall will suffice (both of
    which are beyond the scope of this manual but easily searchable with
    Google).

Configuration

Warning for Mac users: PHP does not seem to like Mac end of lines character ("\
r"). So ensure you choose the option that allows to use the *nix end of line
character ("\n") in your text editor before saving a script you have modified.

Configuration note: Almost all configurable data is placed in config.inc.php.
If this file does not exist, please refer to the Quick install section to
create one. This file only needs to contain the parameters you want to change
from their corresponding default value in libraries/config.default.php.

The parameters which relate to design (like colors) are placed in themes/
themename/layout.inc.php. You might also want to create config.footer.inc.php
and config.header.inc.php files to add your site specific code to be included
on start and end of each page.

$cfg['PmaAbsoluteUri'] string
    Sets here the complete URL (with full path) to your phpMyAdmin
    installation's directory. E.g. http://www.your_web.net/
    path_to_your_phpMyAdmin_directory/. Note also that the URL on some web
    servers are case?sensitive. Don?t forget the trailing slash at the end.

    Starting with version 2.3.0, it is advisable to try leaving this blank. In
    most cases phpMyAdmin automatically detects the proper setting. Users of
    port forwarding will need to set PmaAbsoluteUri (more info). A good test is
    to browse a table, edit a row and save it. There should be an error message
    if phpMyAdmin is having trouble auto?detecting the correct value. If you
    get an error that this must be set or if the autodetect code fails to
    detect your path, please post a bug report on our bug tracker so we can
    improve the code.
$cfg['PmaNoRelation_DisableWarning'] boolean
    Starting with version 2.3.0 phpMyAdmin offers a lot of features to work
    with master / foreign ? tables (see $cfg['Servers'][$i]['pmadb']).
    If you tried to set this up and it does not work for you, have a look on
    the "Structure" page of one database where you would like to use it. You
    will find a link that will analyze why those features have been disabled.
    If you do not want to use those features set this variable to TRUE to stop
    this message from appearing.
$cfg['SuhosinDisableWarning'] boolean
    A warning is displayed on the main page if Suhosin is detected. You can set
    this parameter to TRUE to stop this message from appearing.
$cfg['AllowThirdPartyFraming'] boolean
    Setting this to true allows a page located on a different domain to call
    phpMyAdmin inside a frame, and is a potential security hole allowing
    cross-frame scripting attacks.
$cfg['blowfish_secret'] string
    The "cookie" auth_type uses blowfish algorithm to encrypt the password.
    If you are using the "cookie" auth_type, enter here a random passphrase of
    your choice. It will be used internally by the blowfish algorithm: you
    won?t be prompted for this passphrase. The maximum number of characters for
    this parameter seems to be 46.
$cfg['Servers'] array
    Since version 1.4.2, phpMyAdmin supports the administration of multiple
    MySQL servers. Therefore, a $cfg['Servers']-array has been added which
    contains the login information for the different servers. The first $cfg
    ['Servers'][$i]['host'] contains the hostname of the first server, the
    second $cfg['Servers'][$i]['host'] the hostname of the second server, etc.
    In ./libraries/config.default.php, there is only one section for server
    definition, however you can put as many as you need in ./config.inc.php,
    copy that block or needed parts (you don't have to define all settings,
    just those you need to change).
$cfg['Servers'][$i]['host'] string
    The hostname or IP address of your $i-th MySQL-server. E.g. localhost.
$cfg['Servers'][$i]['port'] string
    The port-number of your $i-th MySQL-server. Default is 3306 (leave blank).
    If you use "localhost" as the hostname, MySQL ignores this port number and
    connects with the socket, so if you want to connect to a port different
    from the default port, use "127.0.0.1" or the real hostname in $cfg
    ['Servers'][$i]['host'].
$cfg['Servers'][$i]['socket'] string
    The path to the socket to use. Leave blank for default.
    To determine the correct socket, check your MySQL configuration or, using
    the mysql command?line client, issue the status command. Among the
    resulting information displayed will be the socket used.
$cfg['Servers'][$i]['ssl'] boolean
    Whether to enable SSL for connection to MySQL server.
$cfg['Servers'][$i]['connect_type'] string
    What type connection to use with the MySQL server. Your options are
    'socket' and 'tcp'. It defaults to 'tcp' as that is nearly guaranteed to be
    available on all MySQL servers, while sockets are not supported on some
    platforms.

    To use the socket mode, your MySQL server must be on the same machine as
    the Web server.
$cfg['Servers'][$i]['extension'] string
    What php MySQL extension to use for the connection. Valid options are:

    mysql : The classic MySQL extension. This is the recommended and default
    method at this time.

    mysqli : The improved MySQL extension. This extension became available with
    php 5.0.0 and is the recommended way to connect to a server running MySQL
    4.1.x.
$cfg['Servers'][$i]['compress'] boolean
    Whether to use a compressed protocol for the MySQL server connection or not
    (experimental).
    This feature requires PHP >= 4.3.0.
$cfg['Servers'][$i]['controluser'] string
    $cfg['Servers'][$i]['controlpass'] string
    This special account is used for 2 distinct purposes: to make possible all
    relational features (see $cfg['Servers'][$i]['pmadb']) and, for a MySQL
    server previous to 4.1.2 or running with --skip-show-database, to enable a
    multi-user installation (HTTP or cookie authentication mode).

    When using HTTP or cookie authentication modes (or 'config' authentication
    mode since phpMyAdmin 2.2.1), you need to supply the details of a MySQL
    account that has SELECT privilege on the mysql.user (all columns except
    "Password"), mysql.db (all columns) and mysql.tables_priv (all columns
    except "Grantor" and "Timestamp") tables. This account is used to check
    what databases the user will see at login.
    Please see the install section on "Using authentication modes" for more
    information.

    In phpMyAdmin versions before 2.2.5, those were called "stduser/stdpass".
$cfg['Servers'][$i]['auth_type'] string ['HTTP'|'http'|'cookie'|'config'|
    'signon']
    Whether config or cookie or HTTP or signon authentication should be used
    for this server.
      + 'config' authentication ($auth_type = 'config') is the plain old way:
        username and password are stored in config.inc.php.
      + 'cookie' authentication mode ($auth_type = 'cookie') as introduced in
        2.2.3 allows you to log in as any valid MySQL user with the help of
        cookies. Username and password are stored in cookies during the session
        and password is deleted when it ends. This can also allow you to log in
        in arbitrary server if $cfg['AllowArbitraryServer'] enabled.
      + 'HTTP' authentication (was called 'advanced' in previous versions and
        can be written also as 'http') ($auth_type = 'HTTP') as introduced in
        1.3.0 allows you to log in as any valid MySQL user via HTTP-Auth.
      + 'signon' authentication mode ($auth_type = 'signon') as introduced in
        2.10.0 allows you to log in from prepared PHP session data. This is
        useful for implementing single signon from another application. Sample
        way how to seed session is in signon example: scripts/signon.php. You
        need to configure session name and signon URL to use this
        authentication method.
    Please see the install section on "Using authentication modes" for more
    information.
$cfg['Servers'][$i]['user'] string
    $cfg['Servers'][$i]['password'] string
    When using auth_type = 'config', this is the user/password-pair which
    phpMyAdmin will use to connect to the MySQL server. This user/password pair
    is not needed when HTTP or cookie authentication is used and should be
    empty.
$cfg['Servers'][$i]['nopassword'] boolean
    Allow attempt to log in without password when a login with password fails.
    This can be used together with http authentication, when authentication is
    done some other way and phpMyAdmin gets user name from auth and uses empty
    password for connecting to MySQL. Password login is still tried first, but
    as fallback, no password method is tried.
$cfg['Servers'][$i]['only_db'] string or array
    If set to a (an array of) database name(s), only this (these) database(s)
    will be shown to the user. Since phpMyAdmin 2.2.1, this/these database(s)
    name(s) may contain MySQL wildcards characters ("_" and "%"): if you want
    to use literal instances of these characters, escape them (I.E. use 'my\
    _db' and not 'my_db').
    This setting is an efficient way to lower the server load since the latter
    does not need to send MySQL requests to build the available database list.
    But it does not replace the privileges rules of the MySQL database server.
    If set, it just means only these databases will be displayed but not that
    all other databases can't be used.

    An example of using more that one database: $cfg['Servers'][$i]['only_db']
    = array('db1', 'db2');

    As of phpMyAdmin 2.5.5 the order inside the array is used for sorting the
    databases in the left frame, so that you can individually arrange your
    databases.
    If you want to have certain databases at the top, but don't care about the
    others, you do not need to specify all other databases. Use: $cfg
    ['Servers'][$i]['only_db'] = array('db3', 'db4', '*'); instead to tell
    phpMyAdmin that it should display db3 and db4 on top, and the rest in
    alphabetic order.
$cfg['Servers'][$i]['hide_db'] string
    Regular expression for hiding some databases. This only hides them from
    listing, but a user is still able to access them (using, for example, the
    SQL query area). To limit access, use the MySQL privilege system.

    For example, to hide all databases starting with the letter "a", use

    $cfg['Servers'][$i]['hide_db'] = '^a';

    and to hide both "db1" and "db2" use

    $cfg['Servers'][$i]['hide_db'] = '(db1|db2)';

    More information on regular expressions can be found in the PCRE pattern
    syntax portion of the PHP reference manual.
$cfg['Servers'][$i]['verbose'] string
    Only useful when using phpMyAdmin with multiple server entries. If set,
    this string will be displayed instead of the hostname in the pull-down menu
    on the main page. This can be useful if you want to show only certain
    databases on your system, for example. For HTTP auth, all non-US-ASCII
    characters will be stripped.
$cfg['Servers'][$i]['pmadb'] string
    The name of the database containing the linked-tables infrastructure.

    See the Linked-tables infrastructure section in this document to see the
    benefits of this infrastructure, and for a quick way of creating this
    database and the needed tables.

    If you are the only user of this phpMyAdmin installation, you can use your
    current database to store those special tables; in this case, just put your
    current database name in $cfg['Servers'][$i]['pmadb']. For a multi-user
    installation, set this parameter to the name of your central database
    containing the linked-tables infrastructure.
$cfg['Servers'][$i]['bookmarktable'] string
    Since release 2.2.0 phpMyAdmin allows users to bookmark queries. This can
    be useful for queries you often run.

    To allow the usage of this functionality:
      + set up pmadb and the linked-tables infrastructure
      + enter the table name in $cfg['Servers'][$i]['bookmarktable']
$cfg['Servers'][$i]['relation'] string
    Since release 2.2.4 you can describe, in a special 'relation' table, which
    field is a key in another table (a foreign key). phpMyAdmin currently uses
    this to
      + make clickable, when you browse the master table, the data values that
        point to the foreign table;
      + display in an optional tool-tip the "display field" when browsing the
        master table, if you move the mouse to a column containing a foreign
        key (use also the 'table_info' table);
        (see FAQ 6.7)
      + in edit/insert mode, display a drop-down list of possible foreign keys
        (key value and "display field" are shown)
        (see FAQ 6.21)
      + display links on the table properties page, to check referential
        integrity (display missing foreign keys) for each described key;
      + in query-by-example, create automatic joins (see FAQ 6.6)
      + enable you to get a PDF schema of your database (also uses the
        table_coords table).
    The keys can be numeric or character.

    To allow the usage of this functionality:
      + set up pmadb and the linked-tables infrastructure
      + put the relation table name in $cfg['Servers'][$i]['relation']
      + now as normal user open phpMyAdmin and for each one of your tables
        where you want to use this feature, click "Structure/Relation view/"
        and choose foreign fields.
    Please note that in the current version, master_db must be the same as
    foreign_db. Those fields have been put in future development of the
    cross-db relations.
$cfg['Servers'][$i]['table_info'] string
    Since release 2.3.0 you can describe, in a special 'table_info' table,
    which field is to be displayed as a tool-tip when moving the cursor over
    the corresponding key.
    This configuration variable will hold the name of this special table. To
    allow the usage of this functionality:
      + set up pmadb and the linked-tables infrastructure
      + put the table name in $cfg['Servers'][$i]['table_info']
      + then for each table where you want to use this feature, click
        "Structure/Relation view/Choose field to display" to choose the field.
    Usage tip: Display field.
$cfg['Servers'][$i]['table_coords'] string
    $cfg['Servers'][$i]['pdf_pages'] string
    Since release 2.3.0 you can have phpMyAdmin create PDF pages showing the
    relations between your tables. To do this it needs two tables "pdf_pages"
    (storing information about the available PDF pages) and "table_coords"
    (storing coordinates where each table will be placed on a PDF schema
    output).

    You must be using the "relation" feature.

    To allow the usage of this functionality:
      + set up pmadb and the linked-tables infrastructure
      + put the correct table names in $cfg['Servers'][$i]['table_coords'] and
        $cfg['Servers'][$i]['pdf_pages']
    Usage tips: PDF output.
$cfg['Servers'][$i]['column_info'] string
    Since release 2.3.0 you can store comments to describe each column for each
    table. These will then be shown on the "printview".

    Starting with release 2.5.0, comments are consequently used on the table
    property pages and table browse view, showing up as tool-tips above the
    column name (properties page) or embedded within the header of table in
    browse view. They can also be shown in a table dump. Please see the
    relevant configuration directives later on.

    Also new in release 2.5.0 is a MIME-transformation system which is also
    based on the following table structure. See Transformations for further
    information. To use the MIME-transformation system, your column_info table
    has to have the three new fields 'mimetype', 'transformation',
    'transformation_options'.

    To allow the usage of this functionality:
      + set up pmadb and the linked-tables infrastructure
      + put the table name in $cfg['Servers'][$i]['column_info']
      + to update your PRE-2.5.0 Column_comments Table use this:

        ALTER TABLE `pma_column_comments`
            ADD `mimetype` VARCHAR( 255 ) NOT NULL,
            ADD `transformation` VARCHAR( 255 ) NOT NULL,
            ADD `transformation_options` VARCHAR( 255 ) NOT NULL;

        and remember that the Variable in config.inc.php has been renamed from
        $cfg['Servers'][$i]['column_comments'] to $cfg['Servers'][$i]
        ['column_info']
$cfg['Servers'][$i]['history'] string
    Since release 2.5.0 you can store your SQL history, which means all queries
    you entered manually into the phpMyAdmin interface. If you don't want to
    use a table-based history, you can use the JavaScript-based history. Using
    that, all your history items are deleted when closing the window.

    Using $cfg['QueryHistoryMax'] you can specify an amount of history items
    you want to have on hold. On every login, this list gets cut to the maximum
    amount.

    The query history is only available if JavaScript is enabled in your
    browser.

    To allow the usage of this functionality:
      + set up pmadb and the linked-tables infrastructure
      + put the table name in $cfg['Servers'][$i]['history']
$cfg['Servers'][$i]['designer_coords'] string
    Since release 2.10.0 a Designer interface is available; it permits to
    visually manage the relations.

    To allow the usage of this functionality:
      + set up pmadb and the linked-tables infrastructure
      + put the table name in $cfg['Servers'][$i]['designer_coords']
$cfg['Servers'][$i]['verbose_check'] boolean
    Because release 2.5.0 introduced the new MIME-transformation support, the
    column_info table got enhanced with three new fields. If the above variable
    is set to TRUE (default) phpMyAdmin will check if you have the latest table
    structure available. If not, it will emit a warning to the superuser.

    You can disable this checking behavior by setting the variable to false,
    which should offer a performance increase.

    Recommended to set to FALSE, when you are sure, your table structure is up
    to date.
$cfg['Servers'][$i]['AllowRoot'] boolean
    Whether to allow root access. This is just simplification of rules below.
$cfg['Servers'][$i]['AllowDeny']['order'] string
    If your rule order is empty, then IP authentication is disabled.

    If your rule order is set to 'deny,allow' then the system applies all deny
    rules followed by allow rules. Access is allowed by default. Any client
    which does not match a Deny command or does match an Allow command will be
    allowed access to the server.

    If your rule order is set to 'allow,deny' then the system applies all allow
    rules followed by deny rules. Access is denied by default. Any client which
    does not match an Allow directive or does match a Deny directive will be
    denied access to the server.

    If your rule order is set to 'explicit', the authentication is performed in
    a similar fashion to rule order 'deny,allow', with the added restriction
    that your host/username combination must be listed in the allow rules, and
    not listed in the deny rules. This is the most secure means of using Allow/
    Deny rules, and was available in Apache by specifying allow and deny rules
    without setting any order.

    Please also see $cfg['TrustedProxies'] for detecting IP address behind
    proxies.
$cfg['Servers'][$i]['AllowDeny']['rules'] array of strings
    The general format for the rules is as such:

    <'allow' | 'deny'> <username> [from] <ipmask>

    If you wish to match all users, it is possible to use a '%' as a wildcard
    in the username field.
    There are a few shortcuts you can use in the ipmask field as well (please
    note that those containing SERVER_ADDRESS might not be available on all
    webservers):

    'all' -> 0.0.0.0/0
    'localhost' -> 127.0.0.1/8
    'localnetA' -> SERVER_ADDRESS/8
    'localnetB' -> SERVER_ADDRESS/16
    'localnetC' -> SERVER_ADDRESS/24

    Having an empty rule list is equivalent to either using 'allow % from all'
    if your rule order is set to 'deny,allow' or 'deny % from all' if your rule
    order is set to 'allow,deny' or 'explicit'.

    For the IP matching system, the following work:
    xxx.xxx.xxx.xxx (an exact IP address)
    xxx.xxx.xxx.[yyy-zzz] (an IP address range)
    xxx.xxx.xxx.xxx/nn (CIDR, Classless Inter-Domain Routing type IP addresses)
    But the following does not work:
    xxx.xxx.xxx.xx[yyy-zzz] (partial IP address range)
$cfg['Servers'][$i]['SignonSession'] string
    Name of session which will be used for signon authentication method.
$cfg['Servers'][$i]['SignonURL'] string
    URL where user will be redirected to log in for signon authentication
    method. Should be absolute including protocol.
$cfg['Servers'][$i]['LogoutURL'] string
    URL where user will be redirected after logout (doesn't affect config
    authentication method). Should be absolute including protocol.
$cfg['ServerDefault'] integer
    If you have more than one server configured, you can set $cfg
    ['ServerDefault'] to any one of them to autoconnect to that server when
    phpMyAdmin is started, or set it to 0 to be given a list of servers without
    logging in.
    If you have only one server configured, $cfg['ServerDefault'] MUST be set
    to that server.
$cfg['MaxDbList'] integer
    The maximum number of database names to be displayed in the navigation
    frame and the database list.
$cfg['MaxTableList'] integer
    The maximum number of table names to be displayed in the main panel's list
    (except on the Export page). This limit is also enforced in the navigation
    panel when in Light mode.
$cfg['MaxCharactersInDisplayedSQL'] integer
    The maximum number of characters when a SQL query is displayed. The default
    limit of 1000 should be correct to avoid the display of tons of hexadecimal
    codes that represent BLOBs, but some users have real SQL queries that are
    longer than 1000 characters. Also, if a query's length exceeds this limit,
    this query is not saved in the history.
$cfg['OBGzip'] string/boolean
    Defines whether to use GZip output buffering for increased speed in HTTP
    transfers.
    Set to true/false for enabling/disabling. When set to 'auto' (string),
    phpMyAdmin tries to enable output buffering and will automatically disable
    it if your browser has some problems with buffering. IE6 with a certain
    patch is known to cause data corruption when having enabled buffering.
$cfg['PersistentConnections'] boolean
    Whether persistent connections should be used or not (mysql_connect or
    mysql_pconnect).
$cfg['ForceSSL'] boolean
    Whether to force using https while accessing phpMyAdmin.
$cfg['ExecTimeLimit'] integer [number of seconds]
    Set the number of seconds a script is allowed to run. If seconds is set to
    zero, no time limit is imposed.
    This setting is used while importing/exporting dump files but has no effect
    when PHP is running in safe mode.
$cfg['MemoryLimit'] integer [number of bytes]
    Set the number of bytes a script is allowed to allocate. If number set to
    zero, no limit is imposed.
    This setting is used while importing/exporting dump files but has no effect
    when PHP is running in safe mode.
    You can also use any string as in php.ini, eg. '16M'.
$cfg['SkipLockedTables'] boolean
    Mark used tables and make it possible to show databases with locked tables
    (since MySQL 3.23.30).
$cfg['ShowSQL'] boolean
    Defines whether SQL queries generated by phpMyAdmin should be displayed or
    not.
$cfg['AllowUserDropDatabase'] boolean
    Defines whether normal users (non-administrator) are allowed to delete
    their own database or not. If set as FALSE, the link "Drop Database" will
    not be shown, and even a "DROP DATABASE mydatabase" will be rejected. Quite
    practical for ISP's with many customers.
    Please note that this limitation of SQL queries is not as strict as when
    using MySQL privileges. This is due to nature of SQL queries which might be
    quite complicated. So this choice should be viewed as help to avoid
    accidental dropping rather than strict privilege limitation.
$cfg['Confirm'] boolean
    Whether a warning ("Are your really sure...") should be displayed when
    you're about to lose data.
$cfg['LoginCookieRecall'] boolean
    Define whether the previous login should be recalled or not in cookie
    authentication mode.
$cfg['LoginCookieValidity'] integer [number of seconds]
    Define how long is login cookie valid.
$cfg['LoginCookieStore'] integer [number of seconds]
    Define how long is login cookie should be stored in browser. Default 0
    means that it will be kept for existing session. This is recommended for
    not trusted environments.
$cfg['LoginCookieDeleteAll'] boolean
    If enabled (default), logout deletes cookies for all servers, otherwise
    only for current one. Setting this to false makes it easy to forget to log
    out from other server, when you are using more of them.
$cfg['UseDbSearch'] boolean
    Define whether the "search string inside database" is enabled or not.
$cfg['IgnoreMultiSubmitErrors'] boolean
    Define whether phpMyAdmin will continue executing a multi-query statement
    if one of the queries fails. Default is to abort execution.
$cfg['VerboseMultiSubmit'] boolean
    Define whether phpMyAdmin will output the results of each query of a
    multi-query statement embedded into the SQL output as inline comments.
    Defaults to TRUE.
$cfg['AllowArbitraryServer'] boolean
    If enabled allows you to log in to arbitrary servers using cookie auth.

    NOTE: Please use this carefully, as this may allow users access to MySQL
    servers behind the firewall where your HTTP server is placed.
$cfg['LeftFrameLight'] boolean
    Defines whether to use a select-based menu and display only the current
    tables in the left frame (smaller page). Only in Non-Lightmode you can use
    the feature to display nested folders using $cfg['LeftFrameTableSeparator']
$cfg['LeftFrameDBTree'] boolean
    In light mode, defines whether to display the names of databases (in the
    selector) using a tree, see also $cfg['LeftFrameDBSeparator'].
$cfg['LeftFrameDBSeparator'] string
    The string used to separate the parts of the database name when showing
    them in a tree.
$cfg['LeftFrameTableSeparator'] string
    Defines a string to be used to nest table spaces. Defaults to '__'. This
    means if you have tables like 'first__second__third' this will be shown as
    a three-level hierarchy like: first > second > third. If set to FALSE or
    empty, the feature is disabled. NOTE: You should not use this separator at
    the beginning or end of a table name or multiple times after another
    without any other characters in between.
$cfg['LeftFrameTableLevel'] string
    Defines how many sublevels should be displayed when splitting up tables by
    the above separator.
$cfg['ShowTooltip'] boolean
    Defines whether to display table comment as tool-tip in left frame or not.
$cfg['ShowTooltipAliasDB'] boolean
    If tool-tips are enabled and a DB comment is set, this will flip the
    comment and the real name. That means that if you have a table called
    'user0001' and add the comment 'MyName' on it, you will see the name
    'MyName' used consequently in the left frame and the tool-tip shows the
    real name of the DB.
$cfg['ShowTooltipAliasTB'] boolean/string
    Same as $cfg['ShowTooltipAliasDB'], except this works for table names. When
    setting this to 'nested', the Alias of the Tablename is only used to split/
    nest the tables according to the $cfg['LeftFrameTableSeparator'] directive.
    So only the folder is called like the Alias, the tablename itself stays the
    real tablename.
$cfg['LeftDisplayLogo'] boolean
    Defines whether or not to display the phpMyAdmin logo at the top of the
    left frame. Defaults to TRUE.
$cfg['LeftLogoLink'] string
    Enter URL where logo in the navigation frame will point to. For use
    especially with self made theme which changes this. The default value for
    this is main.php.
$cfg['LeftLogoLinkWindow'] string
    Whether to open the linked page in the main window (main) or in a new one
    (new). Note: use new if you are linking to phpmyadmin.net.
$cfg['LeftDisplayServers'] boolean
    Defines whether or not to display a server choice at the top of the left
    frame. Defaults to FALSE.
$cfg['DisplayServersList'] boolean
    Defines whether to display this server choice as links instead of in a
    drop-down. Defaults to FALSE (drop-down).
$cfg['DisplayDatabasesList'] boolean or text
    Defines whether to display database choice in light navigation frame as
    links instead of in a drop-down. Defaults to 'auto' - on main page list is
    shown, when database is selected, only drop down is displayed.
$cfg['ShowStats'] boolean
    Defines whether or not to display space usage and statistics about
    databases and tables.
    Note that statistics requires at least MySQL 3.23.3 and that, at this date,
    MySQL doesn't return such information for Berkeley DB tables.
$cfg['ShowServerInfo'] boolean
    Defines whether to display detailed server information on main page. You
    can additionally hide more information by using $cfg['Servers'][$i]
    ['verbose'].
$cfg['ShowPhpInfo'] boolean
    $cfg['ShowChgPassword'] boolean
    $cfg['ShowCreateDb'] boolean
    Defines whether to display the "PHP information" and "Change password "
    links and form for creating database or not at the starting main (right)
    frame. This setting does not check MySQL commands entered directly.

    Please note that to block the usage of phpinfo() in scripts, you have to
    put this in your php.ini:

    disable_functions = phpinfo()

    Also note that enabling the "Change password " link has no effect with
    "config" authentication mode: because of the hard coded password value in
    the configuration file, end users can't be allowed to change their
    passwords.
$cfg['SuggestDBName'] boolean
    Defines whether to suggest a database name on the "Create Database" form or
    to keep the textfield empty.
$cfg['ShowBlob'] boolean
    Defines whether or not BLOB fields are shown when browsing a table's
    content.
$cfg['NavigationBarIconic'] string
    Defines whether navigation bar buttons and the right panel top menu contain
    text or symbols only. A value of TRUE d